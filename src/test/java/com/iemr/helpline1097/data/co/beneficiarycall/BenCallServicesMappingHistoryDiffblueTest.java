package com.iemr.helpline1097.data.co.beneficiarycall;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.mock;

import com.iemr.helpline1097.data.co.feedback.Designation;
import com.iemr.helpline1097.data.co.feedback.FeedbackDetails;
import com.iemr.helpline1097.data.co.feedback.FeedbackRequestDetails;
import com.iemr.helpline1097.data.co.feedback.FeedbackStatus;
import com.iemr.helpline1097.data.co.feedback.InstituteType;
import com.iemr.helpline1097.data.co.feedback.Severity;
import com.iemr.helpline1097.data.co.services.CategoryDetails;
import com.iemr.helpline1097.data.co.services.Directory;
import com.iemr.helpline1097.data.co.services.DirectoryMapping;
import com.iemr.helpline1097.data.co.services.DistrictBlock;
import com.iemr.helpline1097.data.co.services.DistrictBranchMapping;
import com.iemr.helpline1097.data.co.services.Districts;
import com.iemr.helpline1097.data.co.services.Institute;
import com.iemr.helpline1097.data.co.services.InstituteSubDirectory;
import com.iemr.helpline1097.data.co.services.InstitutionDetails;
import com.iemr.helpline1097.data.co.services.States;
import com.iemr.helpline1097.data.co.services.SubCategoryDetails;
import com.iemr.helpline1097.utils.mapper.OutputMapper;

import java.sql.Date;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.junit.jupiter.api.Test;

class BenCallServicesMappingHistoryDiffblueTest {
    /**
     * Methods under test:
     *
     * <ul>
     *   <li>
     * {@link BenCallServicesMappingHistory#BenCallServicesMappingHistory(Long, Long, Long, Integer, SubServices, CategoryDetails, Integer, SubCategoryDetails, Integer, String, Timestamp)}
     *   <li>{@link BenCallServicesMappingHistory#toString()}
     * </ul>
     */
    @Test
    void testGettersAndSetters() {
        // Arrange
        SubServices subServices = new SubServices();
        ArrayList<BenCallServicesMappingHistory> benCallServicesMappingHistories = new ArrayList<>();
        subServices.setBenCallServicesMappingHistories(benCallServicesMappingHistories);
        ArrayList<CategoryDetails> categoryDetails = new ArrayList<>();
        subServices.setCategoryDetails(categoryDetails);
        subServices.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        subServices.setCreatedDate(mock(Timestamp.class));
        subServices.setDeleted(true);
        subServices.setLastModDate(mock(Timestamp.class));
        subServices.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper = new OutputMapper();
        subServices.setOutputMapper(outputMapper);
        subServices.setSubServiceDesc("Sub Service Desc");
        subServices.setSubServiceID(1);
        subServices.setSubServiceName("Sub Service Name");

        SubServices subServices2 = new SubServices();
        ArrayList<BenCallServicesMappingHistory> benCallServicesMappingHistories2 = new ArrayList<>();
        subServices2.setBenCallServicesMappingHistories(benCallServicesMappingHistories2);
        ArrayList<CategoryDetails> categoryDetails2 = new ArrayList<>();
        subServices2.setCategoryDetails(categoryDetails2);
        subServices2.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        subServices2.setCreatedDate(mock(Timestamp.class));
        subServices2.setDeleted(true);
        subServices2.setLastModDate(mock(Timestamp.class));
        subServices2.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper2 = new OutputMapper();
        subServices2.setOutputMapper(outputMapper2);
        subServices2.setSubServiceDesc("Sub Service Desc");
        subServices2.setSubServiceID(1);
        subServices2.setSubServiceName("Sub Service Name");

        CategoryDetails categoryDetails3 = new CategoryDetails();
        ArrayList<BenCallServicesMappingHistory> benCallServicesMappingHistories3 = new ArrayList<>();
        categoryDetails3.setBenCallServicesMappingHistories(benCallServicesMappingHistories3);
        categoryDetails3.setCategoryDesc("Category Desc");
        categoryDetails3.setCategoryID(1);
        categoryDetails3.setCategoryName("Category Name");
        categoryDetails3.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        categoryDetails3.setCreatedDate(mock(Timestamp.class));
        categoryDetails3.setDeleted(true);
        categoryDetails3.setLastModDate(mock(Timestamp.class));
        categoryDetails3.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper3 = new OutputMapper();
        categoryDetails3.setOutputMapper(outputMapper3);
        HashSet<SubCategoryDetails> subCategories = new HashSet<>();
        categoryDetails3.setSubCategories(subCategories);
        categoryDetails3.setSubServiceID(1);
        categoryDetails3.setSubServices(subServices2);

        SubServices subServices3 = new SubServices();
        ArrayList<BenCallServicesMappingHistory> benCallServicesMappingHistories4 = new ArrayList<>();
        subServices3.setBenCallServicesMappingHistories(benCallServicesMappingHistories4);
        ArrayList<CategoryDetails> categoryDetails4 = new ArrayList<>();
        subServices3.setCategoryDetails(categoryDetails4);
        subServices3.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        subServices3.setCreatedDate(mock(Timestamp.class));
        subServices3.setDeleted(true);
        subServices3.setLastModDate(mock(Timestamp.class));
        subServices3.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper4 = new OutputMapper();
        subServices3.setOutputMapper(outputMapper4);
        subServices3.setSubServiceDesc("Sub Service Desc");
        subServices3.setSubServiceID(1);
        subServices3.setSubServiceName("Sub Service Name");

        CategoryDetails categoryDetails5 = new CategoryDetails();
        ArrayList<BenCallServicesMappingHistory> benCallServicesMappingHistories5 = new ArrayList<>();
        categoryDetails5.setBenCallServicesMappingHistories(benCallServicesMappingHistories5);
        categoryDetails5.setCategoryDesc("Category Desc");
        categoryDetails5.setCategoryID(1);
        categoryDetails5.setCategoryName("Category Name");
        categoryDetails5.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        categoryDetails5.setCreatedDate(mock(Timestamp.class));
        categoryDetails5.setDeleted(true);
        categoryDetails5.setLastModDate(mock(Timestamp.class));
        categoryDetails5.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper5 = new OutputMapper();
        categoryDetails5.setOutputMapper(outputMapper5);
        HashSet<SubCategoryDetails> subCategories2 = new HashSet<>();
        categoryDetails5.setSubCategories(subCategories2);
        categoryDetails5.setSubServiceID(1);
        categoryDetails5.setSubServices(subServices3);

        SubCategoryDetails subCategoryDetails = new SubCategoryDetails();
        ArrayList<BenCallServicesMappingHistory> benCallServicesMappingHistories6 = new ArrayList<>();
        subCategoryDetails.setBenCallServicesMappingHistories(benCallServicesMappingHistories6);
        subCategoryDetails.setCategoryDetails(categoryDetails5);
        subCategoryDetails.setCategoryID(1);
        subCategoryDetails.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        subCategoryDetails.setCreatedDate(mock(Timestamp.class));
        subCategoryDetails.setDeleted(true);
        subCategoryDetails.setLastModDate(mock(Timestamp.class));
        subCategoryDetails.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper6 = new OutputMapper();
        subCategoryDetails.setOutputMapper(outputMapper6);
        subCategoryDetails.setSubCatFilePath("/directory/foo.txt");
        subCategoryDetails.setSubCategoryDesc("Sub Category Desc");
        subCategoryDetails.setSubCategoryID(1);
        subCategoryDetails.setSubCategoryName("Sub Category Name");
        Timestamp createdDate = mock(Timestamp.class);

        // Act
        BenCallServicesMappingHistory actualBenCallServicesMappingHistory = new BenCallServicesMappingHistory(1L, 1L, 1L, 1,
                subServices, categoryDetails3, 1, subCategoryDetails, 1, "Jan 1, 2020 8:00am GMT+0100", createdDate);
        actualBenCallServicesMappingHistory.toString();

        // Assert
        SubCategoryDetails subCategoryDetails2 = actualBenCallServicesMappingHistory.getSubCategoryDetails();
        assertEquals("/directory/foo.txt", subCategoryDetails2.getSubCatFilePath());
        CategoryDetails categoryDetails6 = actualBenCallServicesMappingHistory.getCategoryDetails();
        assertEquals("Category Desc", categoryDetails6.getCategoryDesc());
        CategoryDetails categoryDetails7 = subCategoryDetails2.getCategoryDetails();
        assertEquals("Category Desc", categoryDetails7.getCategoryDesc());
        assertEquals("Category Name", categoryDetails6.getCategoryName());
        assertEquals("Category Name", categoryDetails7.getCategoryName());
        assertEquals("Jan 1, 2020 8:00am GMT+0100", actualBenCallServicesMappingHistory.getCreatedBy());
        SubServices subServices4 = actualBenCallServicesMappingHistory.getSubServices();
        assertEquals("Jan 1, 2020 8:00am GMT+0100", subServices4.getCreatedBy());
        SubServices subServices5 = categoryDetails6.getSubServices();
        assertEquals("Jan 1, 2020 8:00am GMT+0100", subServices5.getCreatedBy());
        SubServices subServices6 = categoryDetails7.getSubServices();
        assertEquals("Jan 1, 2020 8:00am GMT+0100", subServices6.getCreatedBy());
        assertEquals("Jan 1, 2020 8:00am GMT+0100", categoryDetails6.getCreatedBy());
        assertEquals("Jan 1, 2020 8:00am GMT+0100", categoryDetails7.getCreatedBy());
        assertEquals("Jan 1, 2020 8:00am GMT+0100", subCategoryDetails2.getCreatedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", subServices4.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", subServices5.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", subServices6.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", categoryDetails6.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", categoryDetails7.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", subCategoryDetails2.getModifiedBy());
        assertEquals("Sub Category Desc", subCategoryDetails2.getSubCategoryDesc());
        assertEquals("Sub Category Name", subCategoryDetails2.getSubCategoryName());
        assertEquals("Sub Service Desc", subServices4.getSubServiceDesc());
        assertEquals("Sub Service Desc", subServices5.getSubServiceDesc());
        assertEquals("Sub Service Desc", subServices6.getSubServiceDesc());
        assertEquals("Sub Service Name", subServices4.getSubServiceName());
        assertEquals("Sub Service Name", subServices5.getSubServiceName());
        assertEquals("Sub Service Name", subServices6.getSubServiceName());
        assertNull(actualBenCallServicesMappingHistory.getBeneficiaryCall());
        assertNull(actualBenCallServicesMappingHistory.getFeedbackDetails());
        assertNull(actualBenCallServicesMappingHistory.getCoCategoryDetails());
        assertNull(actualBenCallServicesMappingHistory.getInstituteDirectoryMapping());
        assertNull(actualBenCallServicesMappingHistory.getCoSubCategoryDetails());
        assertNull(actualBenCallServicesMappingHistory.getDeleted());
        assertNull(actualBenCallServicesMappingHistory.getCoCategoryID());
        assertNull(actualBenCallServicesMappingHistory.getCoSubCategoryID());
        assertNull(actualBenCallServicesMappingHistory.getFeedbackID());
        assertNull(actualBenCallServicesMappingHistory.getInstituteDirMapID());
        assertNull(actualBenCallServicesMappingHistory.getModifiedBy());
        assertNull(actualBenCallServicesMappingHistory.getRequestID());
        assertNull(actualBenCallServicesMappingHistory.getLastModDate());
        assertEquals(1, actualBenCallServicesMappingHistory.getCategoryID().intValue());
        assertEquals(1, actualBenCallServicesMappingHistory.getSubCategoryID().intValue());
        assertEquals(1, actualBenCallServicesMappingHistory.getSubServiceID().intValue());
        assertEquals(1, subServices4.getSubServiceID().intValue());
        assertEquals(1, subServices5.getSubServiceID().intValue());
        assertEquals(1, subServices6.getSubServiceID().intValue());
        assertEquals(1, categoryDetails6.getCategoryID().intValue());
        assertEquals(1, categoryDetails7.getCategoryID().intValue());
        assertEquals(1, categoryDetails6.getSubServiceID().intValue());
        assertEquals(1, categoryDetails7.getSubServiceID().intValue());
        assertEquals(1, subCategoryDetails2.getCategoryID().intValue());
        assertEquals(1, subCategoryDetails2.getSubCategoryID().intValue());
        assertEquals(1L, actualBenCallServicesMappingHistory.getBenCall97ServiceMapID().longValue());
        assertEquals(1L, actualBenCallServicesMappingHistory.getBenCallID().longValue());
        assertEquals(1L, actualBenCallServicesMappingHistory.getBeneficiaryRegID().longValue());
        assertTrue(subServices4.getDeleted());
        assertTrue(subServices5.getDeleted());
        assertTrue(subServices6.getDeleted());
        assertTrue(categoryDetails6.getDeleted());
        assertTrue(categoryDetails7.getDeleted());
        assertTrue(subCategoryDetails2.getDeleted());
        List<SubCategoryDetails> counsellings = actualBenCallServicesMappingHistory.getCounsellings();
        assertTrue(counsellings.isEmpty());
        List<FeedbackDetails> feedbacks = actualBenCallServicesMappingHistory.getFeedbacks();
        assertTrue(feedbacks.isEmpty());
        List<SubCategoryDetails> informations = actualBenCallServicesMappingHistory.getInformations();
        assertTrue(informations.isEmpty());
        List<DirectoryMapping> referrals = actualBenCallServicesMappingHistory.getReferrals();
        assertTrue(referrals.isEmpty());
        List<BenCallServicesMappingHistory> benCallServicesMappingHistories7 = subServices4
                .getBenCallServicesMappingHistories();
        assertTrue(benCallServicesMappingHistories7.isEmpty());
        List<BenCallServicesMappingHistory> benCallServicesMappingHistories8 = subServices5
                .getBenCallServicesMappingHistories();
        assertTrue(benCallServicesMappingHistories8.isEmpty());
        List<BenCallServicesMappingHistory> benCallServicesMappingHistories9 = subServices6
                .getBenCallServicesMappingHistories();
        assertTrue(benCallServicesMappingHistories9.isEmpty());
        List<CategoryDetails> categoryDetails8 = subServices4.getCategoryDetails();
        assertTrue(categoryDetails8.isEmpty());
        List<CategoryDetails> categoryDetails9 = subServices5.getCategoryDetails();
        assertTrue(categoryDetails9.isEmpty());
        List<CategoryDetails> categoryDetails10 = subServices6.getCategoryDetails();
        assertTrue(categoryDetails10.isEmpty());
        List<BenCallServicesMappingHistory> benCallServicesMappingHistories10 = categoryDetails6
                .getBenCallServicesMappingHistories();
        assertTrue(benCallServicesMappingHistories10.isEmpty());
        List<BenCallServicesMappingHistory> benCallServicesMappingHistories11 = categoryDetails7
                .getBenCallServicesMappingHistories();
        assertTrue(benCallServicesMappingHistories11.isEmpty());
        List<BenCallServicesMappingHistory> benCallServicesMappingHistories12 = subCategoryDetails2
                .getBenCallServicesMappingHistories();
        assertTrue(benCallServicesMappingHistories12.isEmpty());
        Set<SubCategoryDetails> subCategories3 = categoryDetails6.getSubCategories();
        assertTrue(subCategories3.isEmpty());
        Set<SubCategoryDetails> subCategories4 = categoryDetails7.getSubCategories();
        assertTrue(subCategories4.isEmpty());
        assertEquals(benCallServicesMappingHistories, counsellings);
        assertEquals(benCallServicesMappingHistories, feedbacks);
        assertEquals(benCallServicesMappingHistories, informations);
        assertEquals(benCallServicesMappingHistories, referrals);
        assertEquals(benCallServicesMappingHistories, categoryDetails8);
        assertEquals(benCallServicesMappingHistories, benCallServicesMappingHistories10);
        assertEquals(benCallServicesMappingHistories, benCallServicesMappingHistories12);
        assertSame(subServices, subServices4);
        assertSame(subServices2, subServices5);
        assertSame(subServices3, subServices6);
        assertSame(categoryDetails3, categoryDetails6);
        assertSame(categoryDetails5, categoryDetails7);
        assertSame(subCategoryDetails, subCategoryDetails2);
        assertSame(outputMapper, subServices4.getOutputMapper());
        assertSame(outputMapper2, subServices5.getOutputMapper());
        assertSame(outputMapper4, subServices6.getOutputMapper());
        assertSame(outputMapper3, categoryDetails6.getOutputMapper());
        assertSame(outputMapper5, categoryDetails7.getOutputMapper());
        assertSame(outputMapper6, subCategoryDetails2.getOutputMapper());
        assertSame(benCallServicesMappingHistories, benCallServicesMappingHistories7);
        assertSame(benCallServicesMappingHistories2, benCallServicesMappingHistories8);
        assertSame(benCallServicesMappingHistories4, benCallServicesMappingHistories9);
        assertSame(categoryDetails, categoryDetails8);
        assertSame(categoryDetails2, categoryDetails9);
        assertSame(categoryDetails4, categoryDetails10);
        assertSame(benCallServicesMappingHistories3, benCallServicesMappingHistories10);
        assertSame(benCallServicesMappingHistories5, benCallServicesMappingHistories11);
        assertSame(benCallServicesMappingHistories6, benCallServicesMappingHistories12);
        assertSame(subCategories, subCategories3);
        assertSame(subCategories2, subCategories4);
        assertSame(createdDate, actualBenCallServicesMappingHistory.getCreatedDate());
    }

    /**
     * Methods under test:
     *
     * <ul>
     *   <li>
     * {@link BenCallServicesMappingHistory#BenCallServicesMappingHistory(Long, Long, Long, Integer, SubServices, Integer, CategoryDetails, Integer, SubCategoryDetails, Long, FeedbackDetails, Long, DirectoryMapping, String, Timestamp, Integer, CategoryDetails, Integer, SubCategoryDetails)}
     *   <li>{@link BenCallServicesMappingHistory#toString()}
     * </ul>
     */
    @Test
    void testGettersAndSetters2() {
        // Arrange
        SubServices subServices = new SubServices();
        ArrayList<BenCallServicesMappingHistory> benCallServicesMappingHistories = new ArrayList<>();
        subServices.setBenCallServicesMappingHistories(benCallServicesMappingHistories);
        ArrayList<CategoryDetails> categoryDetails = new ArrayList<>();
        subServices.setCategoryDetails(categoryDetails);
        subServices.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        subServices.setCreatedDate(mock(Timestamp.class));
        subServices.setDeleted(true);
        subServices.setLastModDate(mock(Timestamp.class));
        subServices.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper = new OutputMapper();
        subServices.setOutputMapper(outputMapper);
        subServices.setSubServiceDesc("Sub Service Desc");
        subServices.setSubServiceID(1);
        subServices.setSubServiceName("Sub Service Name");

        SubServices subServices2 = new SubServices();
        ArrayList<BenCallServicesMappingHistory> benCallServicesMappingHistories2 = new ArrayList<>();
        subServices2.setBenCallServicesMappingHistories(benCallServicesMappingHistories2);
        ArrayList<CategoryDetails> categoryDetails2 = new ArrayList<>();
        subServices2.setCategoryDetails(categoryDetails2);
        subServices2.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        subServices2.setCreatedDate(mock(Timestamp.class));
        subServices2.setDeleted(true);
        subServices2.setLastModDate(mock(Timestamp.class));
        subServices2.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper2 = new OutputMapper();
        subServices2.setOutputMapper(outputMapper2);
        subServices2.setSubServiceDesc("Sub Service Desc");
        subServices2.setSubServiceID(1);
        subServices2.setSubServiceName("Sub Service Name");

        CategoryDetails categoryDetails3 = new CategoryDetails();
        ArrayList<BenCallServicesMappingHistory> benCallServicesMappingHistories3 = new ArrayList<>();
        categoryDetails3.setBenCallServicesMappingHistories(benCallServicesMappingHistories3);
        categoryDetails3.setCategoryDesc("Category Desc");
        categoryDetails3.setCategoryID(1);
        categoryDetails3.setCategoryName("Category Name");
        categoryDetails3.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        categoryDetails3.setCreatedDate(mock(Timestamp.class));
        categoryDetails3.setDeleted(true);
        categoryDetails3.setLastModDate(mock(Timestamp.class));
        categoryDetails3.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper3 = new OutputMapper();
        categoryDetails3.setOutputMapper(outputMapper3);
        HashSet<SubCategoryDetails> subCategories = new HashSet<>();
        categoryDetails3.setSubCategories(subCategories);
        categoryDetails3.setSubServiceID(1);
        categoryDetails3.setSubServices(subServices2);

        SubServices subServices3 = new SubServices();
        ArrayList<BenCallServicesMappingHistory> benCallServicesMappingHistories4 = new ArrayList<>();
        subServices3.setBenCallServicesMappingHistories(benCallServicesMappingHistories4);
        ArrayList<CategoryDetails> categoryDetails4 = new ArrayList<>();
        subServices3.setCategoryDetails(categoryDetails4);
        subServices3.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        subServices3.setCreatedDate(mock(Timestamp.class));
        subServices3.setDeleted(true);
        subServices3.setLastModDate(mock(Timestamp.class));
        subServices3.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper4 = new OutputMapper();
        subServices3.setOutputMapper(outputMapper4);
        subServices3.setSubServiceDesc("Sub Service Desc");
        subServices3.setSubServiceID(1);
        subServices3.setSubServiceName("Sub Service Name");

        CategoryDetails categoryDetails5 = new CategoryDetails();
        ArrayList<BenCallServicesMappingHistory> benCallServicesMappingHistories5 = new ArrayList<>();
        categoryDetails5.setBenCallServicesMappingHistories(benCallServicesMappingHistories5);
        categoryDetails5.setCategoryDesc("Category Desc");
        categoryDetails5.setCategoryID(1);
        categoryDetails5.setCategoryName("Category Name");
        categoryDetails5.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        categoryDetails5.setCreatedDate(mock(Timestamp.class));
        categoryDetails5.setDeleted(true);
        categoryDetails5.setLastModDate(mock(Timestamp.class));
        categoryDetails5.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper5 = new OutputMapper();
        categoryDetails5.setOutputMapper(outputMapper5);
        HashSet<SubCategoryDetails> subCategories2 = new HashSet<>();
        categoryDetails5.setSubCategories(subCategories2);
        categoryDetails5.setSubServiceID(1);
        categoryDetails5.setSubServices(subServices3);

        SubCategoryDetails subCategoryDetails = new SubCategoryDetails();
        ArrayList<BenCallServicesMappingHistory> benCallServicesMappingHistories6 = new ArrayList<>();
        subCategoryDetails.setBenCallServicesMappingHistories(benCallServicesMappingHistories6);
        subCategoryDetails.setCategoryDetails(categoryDetails5);
        subCategoryDetails.setCategoryID(1);
        subCategoryDetails.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        subCategoryDetails.setCreatedDate(mock(Timestamp.class));
        subCategoryDetails.setDeleted(true);
        subCategoryDetails.setLastModDate(mock(Timestamp.class));
        subCategoryDetails.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper6 = new OutputMapper();
        subCategoryDetails.setOutputMapper(outputMapper6);
        subCategoryDetails.setSubCatFilePath("/directory/foo.txt");
        subCategoryDetails.setSubCategoryDesc("Sub Category Desc");
        subCategoryDetails.setSubCategoryID(1);
        subCategoryDetails.setSubCategoryName("Sub Category Name");

        Designation designation = new Designation();
        designation.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        designation.setCreatedDate(mock(Timestamp.class));
        designation.setDeleted(true);
        designation.setDesignationDesc("Designation Desc");
        designation.setDesignationID(1);
        designation.setDesignationName("Designation Name");
        designation.setLastModDate(mock(Timestamp.class));
        designation.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");

        States states = new States();
        states.setCountryID(1);
        states.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        states.setCreatedDate(mock(Timestamp.class));
        states.setDeleted(true);
        states.setLastModDate(mock(Timestamp.class));
        states.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper7 = new OutputMapper();
        states.setOutputMapper(outputMapper7);
        states.setStateCode("MD");
        states.setStateID(1);
        states.setStateIName("MD");
        states.setStateName("MD");

        Districts district = new Districts();
        district.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        district.setCreatedDate(mock(Timestamp.class));
        district.setDeleted(true);
        district.setDistrictID(1);
        district.setDistrictName("District Name");
        district.setLastModDate(mock(Timestamp.class));
        district.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper8 = new OutputMapper();
        district.setOutputMapper(outputMapper8);
        district.setStateID(1);
        district.setStates(states);

        DistrictBlock districtBlock = new DistrictBlock();
        districtBlock.setBlockID(1);
        districtBlock.setBlockName("Block Name");
        districtBlock.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        districtBlock.setCreatedDate(mock(Timestamp.class));
        districtBlock.setDeleted(true);
        districtBlock.setDistrictID(1);
        districtBlock.setLastModDate(mock(Timestamp.class));
        districtBlock.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper9 = new OutputMapper();
        districtBlock.setOutputMapper(outputMapper9);
        districtBlock.setStateID(1);

        FeedbackStatus feedbackStatus = new FeedbackStatus();
        feedbackStatus.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        feedbackStatus.setCreatedDate(mock(Timestamp.class));
        feedbackStatus.setDeleted(true);
        feedbackStatus.setFeedbackStatus("Feedback Status");
        feedbackStatus.setFeedbackStatusDesc("Feedback Status Desc");
        feedbackStatus.setFeedbackStatusID(1);
        feedbackStatus.setLastModDate(mock(Timestamp.class));
        feedbackStatus.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        feedbackStatus.setProviderServiceMapID(1);

        InstituteType instituteType = new InstituteType();
        instituteType.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        instituteType.setCreatedDate(mock(Date.class));
        instituteType.setDeleted(true);
        instituteType.setInstitutionType("Institution Type");
        instituteType.setInstitutionTypeDesc("Institution Type Desc");
        instituteType.setInstitutionTypeID(1);
        instituteType.setLastModDate(mock(Date.class));
        instituteType.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        instituteType.setProviderServiceMapID(1);

        DistrictBranchMapping m_districtbranchmapping = new DistrictBranchMapping();
        m_districtbranchmapping.setBlockID(1);
        m_districtbranchmapping.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        m_districtbranchmapping.setCreatedDate(mock(Timestamp.class));
        m_districtbranchmapping.setDeleted(true);
        m_districtbranchmapping.setDistrictBranchID(1);
        m_districtbranchmapping.setHabitat("Habitat");
        m_districtbranchmapping.setLastModDate(mock(Timestamp.class));
        m_districtbranchmapping.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        m_districtbranchmapping.setPanchayatName("Panchayat Name");
        m_districtbranchmapping.setPinCode("Pin Code");
        m_districtbranchmapping.setVillageName("Village Name");

        Severity severity = new Severity();
        severity.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        severity.setCreatedDate(mock(Timestamp.class));
        severity.setDeleted(true);
        severity.setLastModDate(mock(Timestamp.class));
        severity.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        severity.setProviderServiceMapID(1);
        severity.setSeverityDesc("S1");
        severity.setSeverityID(1);
        severity.setSeverityTypeName("S1");

        States states2 = new States();
        states2.setCountryID(1);
        states2.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        states2.setCreatedDate(mock(Timestamp.class));
        states2.setDeleted(true);
        states2.setLastModDate(mock(Timestamp.class));
        states2.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper10 = new OutputMapper();
        states2.setOutputMapper(outputMapper10);
        states2.setStateCode("MD");
        states2.setStateID(1);
        states2.setStateIName("MD");
        states2.setStateName("MD");

        FeedbackDetails feedbackDetails = new FeedbackDetails();
        feedbackDetails.setBenCallID(1L);
        feedbackDetails.setBeneficiaryRegID(1L);
        feedbackDetails.setBlockID(1);
        feedbackDetails.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        feedbackDetails.setCreatedDate(mock(Timestamp.class));
        feedbackDetails.setDeleted(true);
        feedbackDetails.setDesignation(designation);
        feedbackDetails.setDesignationID(1);
        feedbackDetails.setDistrict(district);
        feedbackDetails.setDistrictBlock(districtBlock);
        feedbackDetails.setDistrictBranchID(1);
        feedbackDetails.setDistrictID(1);
        feedbackDetails.setFeedback("Feedback");
        feedbackDetails.setFeedbackID(1L);
        ArrayList<FeedbackRequestDetails> feedbackRequestDetails = new ArrayList<>();
        feedbackDetails.setFeedbackRequestDetails(feedbackRequestDetails);
        feedbackDetails.setFeedbackStatus(feedbackStatus);
        feedbackDetails.setFeedbackStatusID((short) 1);
        feedbackDetails.setFeedbackTypeID((short) 1);
        feedbackDetails.setInstiName("Insti Name");
        Institute institute = new Institute(1, "Institution Name");

        feedbackDetails.setInstitute(institute);
        feedbackDetails.setInstituteName("Institute Name");
        feedbackDetails.setInstituteType(instituteType);
        feedbackDetails.setInstituteTypeID(1L);
        feedbackDetails.setInstitutionID(1L);
        feedbackDetails.setInstitutionTypeID(1L);
        feedbackDetails.setLastModDate(mock(Timestamp.class));
        feedbackDetails.setM_districtbranchmapping(m_districtbranchmapping);
        feedbackDetails.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        feedbackDetails.setRequestID("Request ID");
        feedbackDetails.setServiceAvailDate(mock(Timestamp.class));
        feedbackDetails.setServiceID(1);
        feedbackDetails.setSeverity(severity);
        feedbackDetails.setSeverityID((short) 1);
        feedbackDetails.setStateID(1);
        feedbackDetails.setStates(states2);
        feedbackDetails.setSubServiceID(1);
        feedbackDetails.setUserID(1);
        feedbackDetails.setsMSPhoneNo("6625550144");

        DistrictBlock block = new DistrictBlock();
        block.setBlockID(1);
        block.setBlockName("Block Name");
        block.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        block.setCreatedDate(mock(Timestamp.class));
        block.setDeleted(true);
        block.setDistrictID(1);
        block.setLastModDate(mock(Timestamp.class));
        block.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper11 = new OutputMapper();
        block.setOutputMapper(outputMapper11);
        block.setStateID(1);

        DistrictBranchMapping branch = new DistrictBranchMapping();
        branch.setBlockID(1);
        branch.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        branch.setCreatedDate(mock(Timestamp.class));
        branch.setDeleted(true);
        branch.setDistrictBranchID(1);
        branch.setHabitat("Habitat");
        branch.setLastModDate(mock(Timestamp.class));
        branch.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        branch.setPanchayatName("Panchayat Name");
        branch.setPinCode("Pin Code");
        branch.setVillageName("Village Name");

        States states3 = new States();
        states3.setCountryID(1);
        states3.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        states3.setCreatedDate(mock(Timestamp.class));
        states3.setDeleted(true);
        states3.setLastModDate(mock(Timestamp.class));
        states3.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper12 = new OutputMapper();
        states3.setOutputMapper(outputMapper12);
        states3.setStateCode("MD");
        states3.setStateID(1);
        states3.setStateIName("MD");
        states3.setStateName("MD");

        Districts m_district = new Districts();
        m_district.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        m_district.setCreatedDate(mock(Timestamp.class));
        m_district.setDeleted(true);
        m_district.setDistrictID(1);
        m_district.setDistrictName("District Name");
        m_district.setLastModDate(mock(Timestamp.class));
        m_district.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper13 = new OutputMapper();
        m_district.setOutputMapper(outputMapper13);
        m_district.setStateID(1);
        m_district.setStates(states3);

        States states4 = new States();
        states4.setCountryID(1);
        states4.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        states4.setCreatedDate(mock(Timestamp.class));
        states4.setDeleted(true);
        states4.setLastModDate(mock(Timestamp.class));
        states4.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper14 = new OutputMapper();
        states4.setOutputMapper(outputMapper14);
        states4.setStateCode("MD");
        states4.setStateID(1);
        states4.setStateIName("MD");
        states4.setStateName("MD");

        InstitutionDetails institutionDetails = new InstitutionDetails();
        institutionDetails.setAddress("42 Main St");
        institutionDetails.setBlock(block);
        institutionDetails.setBlockID(1);
        institutionDetails.setBranch(branch);
        institutionDetails.setContactNo1("Contact No1");
        institutionDetails.setContactNo2("Contact No2");
        institutionDetails.setContactNo3("Contact No3");
        institutionDetails.setContactPerson1("Contact Person1");
        institutionDetails.setContactPerson1Email("jane.doe@example.org");
        institutionDetails.setContactPerson2("Contact Person2");
        institutionDetails.setContactPerson2Email("jane.doe@example.org");
        institutionDetails.setContactPerson3("Contact Person3");
        institutionDetails.setContactPerson3Email("jane.doe@example.org");
        institutionDetails.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        institutionDetails.setCreatedDate(mock(Timestamp.class));
        institutionDetails.setDeleted(true);
        institutionDetails.setDistrictBranchMappingID(1);
        institutionDetails.setDistrictID(1);
        institutionDetails.setInstitutionID(1);
        institutionDetails.setInstitutionName("Institution Name");
        institutionDetails.setLastModDate(mock(Timestamp.class));
        institutionDetails.setM_district(m_district);
        institutionDetails.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper15 = new OutputMapper();
        institutionDetails.setOutputMapper(outputMapper15);
        institutionDetails.setStateID(1);
        institutionDetails.setStates(states4);
        institutionDetails.setWebsite("Website");

        DirectoryMapping instituteDirectoryMapping = new DirectoryMapping();
        instituteDirectoryMapping.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        instituteDirectoryMapping.setCreatedDate(mock(Timestamp.class));
        instituteDirectoryMapping.setDeleted(true);
        Directory directory = new Directory(1, "/directory");

        instituteDirectoryMapping.setDirectory(directory);
        instituteDirectoryMapping.setInstituteDirMapID(1L);
        instituteDirectoryMapping.setInstituteDirectoryID(1);
        instituteDirectoryMapping.setInstituteRouteDirectoryID(1);
        instituteDirectoryMapping.setInstituteSubDirectoryID(1);
        instituteDirectoryMapping.setInstitutionDetails(institutionDetails);
        instituteDirectoryMapping.setInstitutionID(1);
        instituteDirectoryMapping.setLastModDate(mock(Timestamp.class));
        instituteDirectoryMapping.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        InstituteSubDirectory subDirectory = new InstituteSubDirectory(1, "/directory");

        instituteDirectoryMapping.setSubDirectory(subDirectory);
        Timestamp createdDate = mock(Timestamp.class);

        SubServices subServices4 = new SubServices();
        ArrayList<BenCallServicesMappingHistory> benCallServicesMappingHistories7 = new ArrayList<>();
        subServices4.setBenCallServicesMappingHistories(benCallServicesMappingHistories7);
        ArrayList<CategoryDetails> categoryDetails6 = new ArrayList<>();
        subServices4.setCategoryDetails(categoryDetails6);
        subServices4.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        subServices4.setCreatedDate(mock(Timestamp.class));
        subServices4.setDeleted(true);
        subServices4.setLastModDate(mock(Timestamp.class));
        subServices4.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper16 = new OutputMapper();
        subServices4.setOutputMapper(outputMapper16);
        subServices4.setSubServiceDesc("Sub Service Desc");
        subServices4.setSubServiceID(1);
        subServices4.setSubServiceName("Sub Service Name");

        CategoryDetails coCategoryDetails = new CategoryDetails();
        ArrayList<BenCallServicesMappingHistory> benCallServicesMappingHistories8 = new ArrayList<>();
        coCategoryDetails.setBenCallServicesMappingHistories(benCallServicesMappingHistories8);
        coCategoryDetails.setCategoryDesc("Category Desc");
        coCategoryDetails.setCategoryID(1);
        coCategoryDetails.setCategoryName("Category Name");
        coCategoryDetails.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        coCategoryDetails.setCreatedDate(mock(Timestamp.class));
        coCategoryDetails.setDeleted(true);
        coCategoryDetails.setLastModDate(mock(Timestamp.class));
        coCategoryDetails.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper17 = new OutputMapper();
        coCategoryDetails.setOutputMapper(outputMapper17);
        HashSet<SubCategoryDetails> subCategories3 = new HashSet<>();
        coCategoryDetails.setSubCategories(subCategories3);
        coCategoryDetails.setSubServiceID(1);
        coCategoryDetails.setSubServices(subServices4);

        SubServices subServices5 = new SubServices();
        ArrayList<BenCallServicesMappingHistory> benCallServicesMappingHistories9 = new ArrayList<>();
        subServices5.setBenCallServicesMappingHistories(benCallServicesMappingHistories9);
        ArrayList<CategoryDetails> categoryDetails7 = new ArrayList<>();
        subServices5.setCategoryDetails(categoryDetails7);
        subServices5.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        subServices5.setCreatedDate(mock(Timestamp.class));
        subServices5.setDeleted(true);
        subServices5.setLastModDate(mock(Timestamp.class));
        subServices5.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper18 = new OutputMapper();
        subServices5.setOutputMapper(outputMapper18);
        subServices5.setSubServiceDesc("Sub Service Desc");
        subServices5.setSubServiceID(1);
        subServices5.setSubServiceName("Sub Service Name");

        CategoryDetails categoryDetails8 = new CategoryDetails();
        ArrayList<BenCallServicesMappingHistory> benCallServicesMappingHistories10 = new ArrayList<>();
        categoryDetails8.setBenCallServicesMappingHistories(benCallServicesMappingHistories10);
        categoryDetails8.setCategoryDesc("Category Desc");
        categoryDetails8.setCategoryID(1);
        categoryDetails8.setCategoryName("Category Name");
        categoryDetails8.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        categoryDetails8.setCreatedDate(mock(Timestamp.class));
        categoryDetails8.setDeleted(true);
        categoryDetails8.setLastModDate(mock(Timestamp.class));
        categoryDetails8.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper19 = new OutputMapper();
        categoryDetails8.setOutputMapper(outputMapper19);
        HashSet<SubCategoryDetails> subCategories4 = new HashSet<>();
        categoryDetails8.setSubCategories(subCategories4);
        categoryDetails8.setSubServiceID(1);
        categoryDetails8.setSubServices(subServices5);

        SubCategoryDetails coSubCategoryDetails = new SubCategoryDetails();
        ArrayList<BenCallServicesMappingHistory> benCallServicesMappingHistories11 = new ArrayList<>();
        coSubCategoryDetails.setBenCallServicesMappingHistories(benCallServicesMappingHistories11);
        coSubCategoryDetails.setCategoryDetails(categoryDetails8);
        coSubCategoryDetails.setCategoryID(1);
        coSubCategoryDetails.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        coSubCategoryDetails.setCreatedDate(mock(Timestamp.class));
        coSubCategoryDetails.setDeleted(true);
        coSubCategoryDetails.setLastModDate(mock(Timestamp.class));
        coSubCategoryDetails.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper20 = new OutputMapper();
        coSubCategoryDetails.setOutputMapper(outputMapper20);
        coSubCategoryDetails.setSubCatFilePath("/directory/foo.txt");
        coSubCategoryDetails.setSubCategoryDesc("Sub Category Desc");
        coSubCategoryDetails.setSubCategoryID(1);
        coSubCategoryDetails.setSubCategoryName("Sub Category Name");

        // Act
        BenCallServicesMappingHistory actualBenCallServicesMappingHistory = new BenCallServicesMappingHistory(1L, 1L, 1L, 1,
                subServices, 1, categoryDetails3, 1, subCategoryDetails, 1L, feedbackDetails, 1L, instituteDirectoryMapping,
                "Jan 1, 2020 8:00am GMT+0100", createdDate, 1, coCategoryDetails, 1, coSubCategoryDetails);
        actualBenCallServicesMappingHistory.toString();

        // Assert
        DirectoryMapping instituteDirectoryMapping2 = actualBenCallServicesMappingHistory.getInstituteDirectoryMapping();
        Directory directory2 = instituteDirectoryMapping2.getDirectory();
        assertEquals("/directory", directory2.getInstituteDirectoryName());
        InstituteSubDirectory subDirectory2 = instituteDirectoryMapping2.getSubDirectory();
        assertEquals("/directory", subDirectory2.getInstituteSubDirectoryName());
        SubCategoryDetails coSubCategoryDetails2 = actualBenCallServicesMappingHistory.getCoSubCategoryDetails();
        assertEquals("/directory/foo.txt", coSubCategoryDetails2.getSubCatFilePath());
        SubCategoryDetails subCategoryDetails2 = actualBenCallServicesMappingHistory.getSubCategoryDetails();
        assertEquals("/directory/foo.txt", subCategoryDetails2.getSubCatFilePath());
        InstitutionDetails institutionDetails2 = instituteDirectoryMapping2.getInstitutionDetails();
        assertEquals("42 Main St", institutionDetails2.getAddress());
        FeedbackDetails feedbackDetails2 = actualBenCallServicesMappingHistory.getFeedbackDetails();
        DistrictBlock districtBlock2 = feedbackDetails2.getDistrictBlock();
        assertEquals("Block Name", districtBlock2.getBlockName());
        DistrictBlock block2 = institutionDetails2.getBlock();
        assertEquals("Block Name", block2.getBlockName());
        CategoryDetails categoryDetails9 = actualBenCallServicesMappingHistory.getCategoryDetails();
        assertEquals("Category Desc", categoryDetails9.getCategoryDesc());
        CategoryDetails coCategoryDetails2 = actualBenCallServicesMappingHistory.getCoCategoryDetails();
        assertEquals("Category Desc", coCategoryDetails2.getCategoryDesc());
        CategoryDetails categoryDetails10 = coSubCategoryDetails2.getCategoryDetails();
        assertEquals("Category Desc", categoryDetails10.getCategoryDesc());
        CategoryDetails categoryDetails11 = subCategoryDetails2.getCategoryDetails();
        assertEquals("Category Desc", categoryDetails11.getCategoryDesc());
        assertEquals("Category Name", categoryDetails9.getCategoryName());
        assertEquals("Category Name", coCategoryDetails2.getCategoryName());
        assertEquals("Category Name", categoryDetails10.getCategoryName());
        assertEquals("Category Name", categoryDetails11.getCategoryName());
        assertEquals("Contact No1", institutionDetails2.getContactNo1());
        assertEquals("Contact No2", institutionDetails2.getContactNo2());
        assertEquals("Contact No3", institutionDetails2.getContactNo3());
        assertEquals("Contact Person1", institutionDetails2.getContactPerson1());
        assertEquals("Contact Person2", institutionDetails2.getContactPerson2());
        assertEquals("Contact Person3", institutionDetails2.getContactPerson3());
        Designation designation2 = feedbackDetails2.getDesignation();
        assertEquals("Designation Desc", designation2.getDesignationDesc());
        assertEquals("Designation Name", designation2.getDesignationName());
        Districts district2 = feedbackDetails2.getDistrict();
        assertEquals("District Name", district2.getDistrictName());
        Districts m_district2 = institutionDetails2.getM_district();
        assertEquals("District Name", m_district2.getDistrictName());
        FeedbackStatus feedbackStatus2 = feedbackDetails2.getFeedbackStatus();
        assertEquals("Feedback Status Desc", feedbackStatus2.getFeedbackStatusDesc());
        assertEquals("Feedback Status", feedbackStatus2.getFeedbackStatus());
        assertEquals("Feedback", feedbackDetails2.getFeedback());
        DistrictBranchMapping m_districtbranchmapping2 = feedbackDetails2.getM_districtbranchmapping();
        assertEquals("Habitat", m_districtbranchmapping2.getHabitat());
        DistrictBranchMapping branch2 = institutionDetails2.getBranch();
        assertEquals("Habitat", branch2.getHabitat());
        assertEquals("Insti Name", feedbackDetails2.getInstiName());
        assertEquals("Institute Name", feedbackDetails2.getInstituteName());
        Institute institute2 = feedbackDetails2.getInstitute();
        assertEquals("Institution Name", institute2.getInstitutionName());
        assertEquals("Institution Name", institutionDetails2.getInstitutionName());
        InstituteType instituteType2 = feedbackDetails2.getInstituteType();
        assertEquals("Institution Type Desc", instituteType2.getInstitutionTypeDesc());
        assertEquals("Institution Type", instituteType2.getInstitutionType());
        assertEquals("Jan 1, 2020 8:00am GMT+0100", actualBenCallServicesMappingHistory.getCreatedBy());
        SubServices subServices6 = actualBenCallServicesMappingHistory.getSubServices();
        assertEquals("Jan 1, 2020 8:00am GMT+0100", subServices6.getCreatedBy());
        SubServices subServices7 = categoryDetails9.getSubServices();
        assertEquals("Jan 1, 2020 8:00am GMT+0100", subServices7.getCreatedBy());
        SubServices subServices8 = coCategoryDetails2.getSubServices();
        assertEquals("Jan 1, 2020 8:00am GMT+0100", subServices8.getCreatedBy());
        SubServices subServices9 = categoryDetails10.getSubServices();
        assertEquals("Jan 1, 2020 8:00am GMT+0100", subServices9.getCreatedBy());
        SubServices subServices10 = categoryDetails11.getSubServices();
        assertEquals("Jan 1, 2020 8:00am GMT+0100", subServices10.getCreatedBy());
        assertEquals("Jan 1, 2020 8:00am GMT+0100", designation2.getCreatedBy());
        assertEquals("Jan 1, 2020 8:00am GMT+0100", feedbackDetails2.getCreatedBy());
        assertEquals("Jan 1, 2020 8:00am GMT+0100", feedbackStatus2.getCreatedBy());
        assertEquals("Jan 1, 2020 8:00am GMT+0100", instituteType2.getCreatedBy());
        Severity severity2 = feedbackDetails2.getSeverity();
        assertEquals("Jan 1, 2020 8:00am GMT+0100", severity2.getCreatedBy());
        assertEquals("Jan 1, 2020 8:00am GMT+0100", categoryDetails9.getCreatedBy());
        assertEquals("Jan 1, 2020 8:00am GMT+0100", coCategoryDetails2.getCreatedBy());
        assertEquals("Jan 1, 2020 8:00am GMT+0100", categoryDetails10.getCreatedBy());
        assertEquals("Jan 1, 2020 8:00am GMT+0100", categoryDetails11.getCreatedBy());
        assertEquals("Jan 1, 2020 8:00am GMT+0100", instituteDirectoryMapping2.getCreatedBy());
        assertEquals("Jan 1, 2020 8:00am GMT+0100", districtBlock2.getCreatedBy());
        assertEquals("Jan 1, 2020 8:00am GMT+0100", block2.getCreatedBy());
        assertEquals("Jan 1, 2020 8:00am GMT+0100", m_districtbranchmapping2.getCreatedBy());
        assertEquals("Jan 1, 2020 8:00am GMT+0100", branch2.getCreatedBy());
        assertEquals("Jan 1, 2020 8:00am GMT+0100", district2.getCreatedBy());
        assertEquals("Jan 1, 2020 8:00am GMT+0100", m_district2.getCreatedBy());
        assertEquals("Jan 1, 2020 8:00am GMT+0100", institutionDetails2.getCreatedBy());
        States states5 = feedbackDetails2.getStates();
        assertEquals("Jan 1, 2020 8:00am GMT+0100", states5.getCreatedBy());
        States states6 = district2.getStates();
        assertEquals("Jan 1, 2020 8:00am GMT+0100", states6.getCreatedBy());
        States states7 = m_district2.getStates();
        assertEquals("Jan 1, 2020 8:00am GMT+0100", states7.getCreatedBy());
        States states8 = institutionDetails2.getStates();
        assertEquals("Jan 1, 2020 8:00am GMT+0100", states8.getCreatedBy());
        assertEquals("Jan 1, 2020 8:00am GMT+0100", coSubCategoryDetails2.getCreatedBy());
        assertEquals("Jan 1, 2020 8:00am GMT+0100", subCategoryDetails2.getCreatedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", subServices6.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", subServices7.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", subServices8.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", subServices9.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", subServices10.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", designation2.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", feedbackDetails2.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", feedbackStatus2.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", instituteType2.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", severity2.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", categoryDetails9.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", coCategoryDetails2.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", categoryDetails10.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", categoryDetails11.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", instituteDirectoryMapping2.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", districtBlock2.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", block2.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", m_districtbranchmapping2.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", branch2.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", district2.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", m_district2.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", institutionDetails2.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", states5.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", states6.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", states7.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", states8.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", coSubCategoryDetails2.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", subCategoryDetails2.getModifiedBy());
        assertEquals("MD", states5.getStateCode());
        assertEquals("MD", states6.getStateCode());
        assertEquals("MD", states7.getStateCode());
        assertEquals("MD", states8.getStateCode());
        assertEquals("MD", states5.getStateIName());
        assertEquals("MD", states6.getStateIName());
        assertEquals("MD", states7.getStateIName());
        assertEquals("MD", states8.getStateIName());
        assertEquals("MD", states5.getStateName());
        assertEquals("MD", states6.getStateName());
        assertEquals("MD", states7.getStateName());
        assertEquals("MD", states8.getStateName());
        assertEquals("Panchayat Name", m_districtbranchmapping2.getPanchayatName());
        assertEquals("Panchayat Name", branch2.getPanchayatName());
        assertEquals("Pin Code", m_districtbranchmapping2.getPinCode());
        assertEquals("Pin Code", branch2.getPinCode());
        assertEquals("Request ID", feedbackDetails2.getRequestID());
        assertEquals("S1", severity2.getSeverityDesc());
        assertEquals("S1", severity2.getSeverityTypeName());
        assertEquals("Sub Category Desc", coSubCategoryDetails2.getSubCategoryDesc());
        assertEquals("Sub Category Desc", subCategoryDetails2.getSubCategoryDesc());
        assertEquals("Sub Category Name", coSubCategoryDetails2.getSubCategoryName());
        assertEquals("Sub Category Name", subCategoryDetails2.getSubCategoryName());
        assertEquals("Sub Service Desc", subServices6.getSubServiceDesc());
        assertEquals("Sub Service Desc", subServices7.getSubServiceDesc());
        assertEquals("Sub Service Desc", subServices8.getSubServiceDesc());
        assertEquals("Sub Service Desc", subServices9.getSubServiceDesc());
        assertEquals("Sub Service Desc", subServices10.getSubServiceDesc());
        assertEquals("Sub Service Name", subServices6.getSubServiceName());
        assertEquals("Sub Service Name", subServices7.getSubServiceName());
        assertEquals("Sub Service Name", subServices8.getSubServiceName());
        assertEquals("Sub Service Name", subServices9.getSubServiceName());
        assertEquals("Sub Service Name", subServices10.getSubServiceName());
        assertEquals("Village Name", m_districtbranchmapping2.getVillageName());
        assertEquals("Village Name", branch2.getVillageName());
        assertEquals("Website", institutionDetails2.getWebsite());
        assertEquals("jane.doe@example.org", institutionDetails2.getContactPerson1Email());
        assertEquals("jane.doe@example.org", institutionDetails2.getContactPerson2Email());
        assertEquals("jane.doe@example.org", institutionDetails2.getContactPerson3Email());
        assertNull(actualBenCallServicesMappingHistory.getBeneficiaryCall());
        assertNull(institute2.getDistrictBlock());
        assertNull(institute2.getM_districtbranchmapping());
        assertNull(institute2.getDistrict());
        assertNull(institute2.getStates());
        assertNull(actualBenCallServicesMappingHistory.getDeleted());
        assertNull(directory2.getDeleted());
        assertNull(institute2.getDeleted());
        assertNull(subDirectory2.getDeleted());
        assertNull(actualBenCallServicesMappingHistory.getCoSubCategoryID());
        assertNull(directory2.getProviderServiceMapID());
        assertNull(institute2.getBlockID());
        assertNull(institute2.getDistrictBranchMappingID());
        assertNull(institute2.getDistrictID());
        assertNull(institute2.getProviderServiceMapID());
        assertNull(institute2.getStateID());
        assertNull(subDirectory2.getInstituteDirectoryID());
        assertNull(actualBenCallServicesMappingHistory.getModifiedBy());
        assertNull(actualBenCallServicesMappingHistory.getRequestID());
        assertNull(directory2.getCreatedBy());
        assertNull(directory2.getInstituteDirectoryDesc());
        assertNull(directory2.getModifiedBy());
        assertNull(institute2.getAddress());
        assertNull(institute2.getContactNo1());
        assertNull(institute2.getContactNo2());
        assertNull(institute2.getContactNo3());
        assertNull(institute2.getContactPerson1());
        assertNull(institute2.getContactPerson1_Email());
        assertNull(institute2.getContactPerson2());
        assertNull(institute2.getContactPerson2_Email());
        assertNull(institute2.getContactPerson3());
        assertNull(institute2.getContactPerson3_Email());
        assertNull(institute2.getCreatedBy());
        assertNull(institute2.getGovtInstituteID());
        assertNull(institute2.getModifiedBy());
        assertNull(institute2.getProcessed());
        assertNull(institute2.getWebsite());
        assertNull(subDirectory2.getCreatedBy());
        assertNull(subDirectory2.getInstituteSubDirectoryDesc());
        assertNull(subDirectory2.getModifiedBy());
        assertNull(actualBenCallServicesMappingHistory.getLastModDate());
        assertNull(directory2.getCreatedDate());
        assertNull(directory2.getLastModDate());
        assertNull(institute2.getCreatedDate());
        assertNull(institute2.getLastModDate());
        assertNull(subDirectory2.getCreatedDate());
        assertNull(subDirectory2.getLastModDate());
        assertEquals(1, district2.getDistrictID());
        assertEquals(1, m_district2.getDistrictID());
        assertEquals(1, states5.getCountryID());
        assertEquals(1, states6.getCountryID());
        assertEquals(1, states7.getCountryID());
        assertEquals(1, states8.getCountryID());
        assertEquals(1, states5.getStateID());
        assertEquals(1, states6.getStateID());
        assertEquals(1, states7.getStateID());
        assertEquals(1, states8.getStateID());
        assertEquals(1, actualBenCallServicesMappingHistory.getCategoryID().intValue());
        assertEquals(1, actualBenCallServicesMappingHistory.getCoCategoryID().intValue());
        assertEquals(1, actualBenCallServicesMappingHistory.getSubCategoryID().intValue());
        assertEquals(1, actualBenCallServicesMappingHistory.getSubServiceID().intValue());
        assertEquals(1, subServices6.getSubServiceID().intValue());
        assertEquals(1, subServices7.getSubServiceID().intValue());
        assertEquals(1, subServices8.getSubServiceID().intValue());
        assertEquals(1, subServices9.getSubServiceID().intValue());
        assertEquals(1, subServices10.getSubServiceID().intValue());
        assertEquals(1, designation2.getDesignationID().intValue());
        assertEquals(1, feedbackDetails2.getBlockID().intValue());
        assertEquals(1, feedbackDetails2.getDesignationID().intValue());
        assertEquals(1, feedbackDetails2.getDistrictBranchID().intValue());
        assertEquals(1, feedbackDetails2.getDistrictID().intValue());
        assertEquals(1, feedbackDetails2.getServiceID().intValue());
        assertEquals(1, feedbackDetails2.getStateID().intValue());
        assertEquals(1, feedbackDetails2.getSubServiceID().intValue());
        assertEquals(1, feedbackDetails2.getUserID().intValue());
        assertEquals(1, feedbackStatus2.getFeedbackStatusID().intValue());
        assertEquals(1, feedbackStatus2.getProviderServiceMapID().intValue());
        assertEquals(1, instituteType2.getInstitutionTypeID().intValue());
        assertEquals(1, instituteType2.getProviderServiceMapID().intValue());
        assertEquals(1, severity2.getProviderServiceMapID().intValue());
        assertEquals(1, severity2.getSeverityID().intValue());
        assertEquals(1, categoryDetails9.getCategoryID().intValue());
        assertEquals(1, coCategoryDetails2.getCategoryID().intValue());
        assertEquals(1, categoryDetails10.getCategoryID().intValue());
        assertEquals(1, categoryDetails11.getCategoryID().intValue());
        assertEquals(1, categoryDetails9.getSubServiceID().intValue());
        assertEquals(1, coCategoryDetails2.getSubServiceID().intValue());
        assertEquals(1, categoryDetails10.getSubServiceID().intValue());
        assertEquals(1, categoryDetails11.getSubServiceID().intValue());
        assertEquals(1, directory2.getInstituteDirectoryID().intValue());
        assertEquals(1, instituteDirectoryMapping2.getInstituteDirectoryID().intValue());
        assertEquals(1, instituteDirectoryMapping2.getInstituteRouteDirectoryID().intValue());
        assertEquals(1, instituteDirectoryMapping2.getInstituteSubDirectoryID().intValue());
        assertEquals(1, instituteDirectoryMapping2.getInstitutionID().intValue());
        assertEquals(1, districtBlock2.getBlockID().intValue());
        assertEquals(1, block2.getBlockID().intValue());
        assertEquals(1, districtBlock2.getDistrictID().intValue());
        assertEquals(1, block2.getDistrictID().intValue());
        assertEquals(1, districtBlock2.getStateID().intValue());
        assertEquals(1, block2.getStateID().intValue());
        assertEquals(1, m_districtbranchmapping2.getBlockID().intValue());
        assertEquals(1, branch2.getBlockID().intValue());
        assertEquals(1, m_districtbranchmapping2.getDistrictBranchID().intValue());
        assertEquals(1, branch2.getDistrictBranchID().intValue());
        assertEquals(1, district2.getStateID().intValue());
        assertEquals(1, m_district2.getStateID().intValue());
        assertEquals(1, institute2.getInstitutionID().intValue());
        assertEquals(1, subDirectory2.getInstituteSubDirectoryID().intValue());
        assertEquals(1, institutionDetails2.getBlockID().intValue());
        assertEquals(1, institutionDetails2.getDistrictBranchMappingID().intValue());
        assertEquals(1, institutionDetails2.getDistrictID().intValue());
        assertEquals(1, institutionDetails2.getInstitutionID().intValue());
        assertEquals(1, institutionDetails2.getStateID().intValue());
        assertEquals(1, coSubCategoryDetails2.getCategoryID().intValue());
        assertEquals(1, subCategoryDetails2.getCategoryID().intValue());
        assertEquals(1, coSubCategoryDetails2.getSubCategoryID().intValue());
        assertEquals(1, subCategoryDetails2.getSubCategoryID().intValue());
        assertEquals(1L, actualBenCallServicesMappingHistory.getBenCall97ServiceMapID().longValue());
        assertEquals(1L, actualBenCallServicesMappingHistory.getBenCallID().longValue());
        assertEquals(1L, actualBenCallServicesMappingHistory.getBeneficiaryRegID().longValue());
        assertEquals(1L, actualBenCallServicesMappingHistory.getFeedbackID().longValue());
        assertEquals(1L, actualBenCallServicesMappingHistory.getInstituteDirMapID().longValue());
        assertEquals(1L, feedbackDetails2.getBenCallID().longValue());
        assertEquals(1L, feedbackDetails2.getBeneficiaryRegID().longValue());
        assertEquals(1L, feedbackDetails2.getFeedbackID().longValue());
        assertEquals(1L, feedbackDetails2.getInstituteTypeID().longValue());
        assertEquals(1L, feedbackDetails2.getInstitutionID().longValue());
        assertEquals(1L, feedbackDetails2.getInstitutionTypeID().longValue());
        assertEquals(1L, instituteDirectoryMapping2.getInstituteDirMapID().longValue());
        assertEquals((short) 1, feedbackDetails2.getFeedbackStatusID().shortValue());
        assertEquals((short) 1, feedbackDetails2.getFeedbackTypeID().shortValue());
        assertEquals((short) 1, feedbackDetails2.getSeverityID().shortValue());
        assertTrue(subServices6.getDeleted());
        assertTrue(subServices7.getDeleted());
        assertTrue(subServices8.getDeleted());
        assertTrue(subServices9.getDeleted());
        assertTrue(subServices10.getDeleted());
        assertTrue(designation2.getDeleted());
        assertTrue(feedbackDetails2.getDeleted());
        assertTrue(feedbackStatus2.getDeleted());
        assertTrue(instituteType2.getDeleted());
        assertTrue(severity2.getDeleted());
        assertTrue(categoryDetails9.getDeleted());
        assertTrue(coCategoryDetails2.getDeleted());
        assertTrue(categoryDetails10.getDeleted());
        assertTrue(categoryDetails11.getDeleted());
        assertTrue(instituteDirectoryMapping2.getDeleted());
        assertTrue(districtBlock2.getDeleted());
        assertTrue(block2.getDeleted());
        assertTrue(districtBlock2.isDeleted());
        assertTrue(block2.isDeleted());
        assertTrue(m_districtbranchmapping2.getDeleted());
        assertTrue(branch2.getDeleted());
        assertTrue(district2.getDeleted());
        assertTrue(m_district2.getDeleted());
        assertTrue(institutionDetails2.getDeleted());
        assertTrue(states5.getDeleted());
        assertTrue(states6.getDeleted());
        assertTrue(states7.getDeleted());
        assertTrue(states8.getDeleted());
        assertTrue(coSubCategoryDetails2.getDeleted());
        assertTrue(subCategoryDetails2.getDeleted());
        List<SubCategoryDetails> counsellings = actualBenCallServicesMappingHistory.getCounsellings();
        assertTrue(counsellings.isEmpty());
        List<FeedbackDetails> feedbacks = actualBenCallServicesMappingHistory.getFeedbacks();
        assertTrue(feedbacks.isEmpty());
        List<SubCategoryDetails> informations = actualBenCallServicesMappingHistory.getInformations();
        assertTrue(informations.isEmpty());
        List<DirectoryMapping> referrals = actualBenCallServicesMappingHistory.getReferrals();
        assertTrue(referrals.isEmpty());
        List<BenCallServicesMappingHistory> benCallServicesMappingHistories12 = subServices6
                .getBenCallServicesMappingHistories();
        assertTrue(benCallServicesMappingHistories12.isEmpty());
        List<BenCallServicesMappingHistory> benCallServicesMappingHistories13 = subServices7
                .getBenCallServicesMappingHistories();
        assertTrue(benCallServicesMappingHistories13.isEmpty());
        List<BenCallServicesMappingHistory> benCallServicesMappingHistories14 = subServices8
                .getBenCallServicesMappingHistories();
        assertTrue(benCallServicesMappingHistories14.isEmpty());
        List<BenCallServicesMappingHistory> benCallServicesMappingHistories15 = subServices9
                .getBenCallServicesMappingHistories();
        assertTrue(benCallServicesMappingHistories15.isEmpty());
        List<BenCallServicesMappingHistory> benCallServicesMappingHistories16 = subServices10
                .getBenCallServicesMappingHistories();
        assertTrue(benCallServicesMappingHistories16.isEmpty());
        List<CategoryDetails> categoryDetails12 = subServices6.getCategoryDetails();
        assertTrue(categoryDetails12.isEmpty());
        List<CategoryDetails> categoryDetails13 = subServices7.getCategoryDetails();
        assertTrue(categoryDetails13.isEmpty());
        List<CategoryDetails> categoryDetails14 = subServices8.getCategoryDetails();
        assertTrue(categoryDetails14.isEmpty());
        List<CategoryDetails> categoryDetails15 = subServices9.getCategoryDetails();
        assertTrue(categoryDetails15.isEmpty());
        List<CategoryDetails> categoryDetails16 = subServices10.getCategoryDetails();
        assertTrue(categoryDetails16.isEmpty());
        List<FeedbackRequestDetails> feedbackRequestDetails2 = feedbackDetails2.getFeedbackRequestDetails();
        assertTrue(feedbackRequestDetails2.isEmpty());
        List<BenCallServicesMappingHistory> benCallServicesMappingHistories17 = categoryDetails9
                .getBenCallServicesMappingHistories();
        assertTrue(benCallServicesMappingHistories17.isEmpty());
        List<BenCallServicesMappingHistory> benCallServicesMappingHistories18 = coCategoryDetails2
                .getBenCallServicesMappingHistories();
        assertTrue(benCallServicesMappingHistories18.isEmpty());
        List<BenCallServicesMappingHistory> benCallServicesMappingHistories19 = categoryDetails10
                .getBenCallServicesMappingHistories();
        assertTrue(benCallServicesMappingHistories19.isEmpty());
        List<BenCallServicesMappingHistory> benCallServicesMappingHistories20 = categoryDetails11
                .getBenCallServicesMappingHistories();
        assertTrue(benCallServicesMappingHistories20.isEmpty());
        List<BenCallServicesMappingHistory> benCallServicesMappingHistories21 = coSubCategoryDetails2
                .getBenCallServicesMappingHistories();
        assertTrue(benCallServicesMappingHistories21.isEmpty());
        List<BenCallServicesMappingHistory> benCallServicesMappingHistories22 = subCategoryDetails2
                .getBenCallServicesMappingHistories();
        assertTrue(benCallServicesMappingHistories22.isEmpty());
        Set<SubCategoryDetails> subCategories5 = categoryDetails9.getSubCategories();
        assertTrue(subCategories5.isEmpty());
        Set<SubCategoryDetails> subCategories6 = coCategoryDetails2.getSubCategories();
        assertTrue(subCategories6.isEmpty());
        Set<SubCategoryDetails> subCategories7 = categoryDetails10.getSubCategories();
        assertTrue(subCategories7.isEmpty());
        Set<SubCategoryDetails> subCategories8 = categoryDetails11.getSubCategories();
        assertTrue(subCategories8.isEmpty());
        assertEquals(benCallServicesMappingHistories, counsellings);
        assertEquals(benCallServicesMappingHistories, feedbacks);
        assertEquals(benCallServicesMappingHistories, informations);
        assertEquals(benCallServicesMappingHistories, referrals);
        assertEquals(benCallServicesMappingHistories, feedbackRequestDetails2);
        assertEquals(benCallServicesMappingHistories, benCallServicesMappingHistories17);
        assertEquals(benCallServicesMappingHistories, benCallServicesMappingHistories18);
        assertSame(subServices, subServices6);
        assertSame(subServices2, subServices7);
        assertSame(subServices4, subServices8);
        assertSame(subServices5, subServices9);
        assertSame(subServices3, subServices10);
        assertSame(designation, designation2);
        assertSame(feedbackDetails, feedbackDetails2);
        assertSame(feedbackStatus, feedbackStatus2);
        assertSame(instituteType, instituteType2);
        assertSame(severity, severity2);
        assertSame(categoryDetails3, categoryDetails9);
        assertSame(coCategoryDetails, coCategoryDetails2);
        assertSame(categoryDetails8, categoryDetails10);
        assertSame(categoryDetails5, categoryDetails11);
        assertSame(directory, directory2);
        assertSame(instituteDirectoryMapping, instituteDirectoryMapping2);
        assertSame(districtBlock, districtBlock2);
        assertSame(block, block2);
        assertSame(m_districtbranchmapping, m_districtbranchmapping2);
        assertSame(branch, branch2);
        assertSame(district, district2);
        assertSame(m_district, m_district2);
        assertSame(institute, institute2);
        assertSame(subDirectory, subDirectory2);
        assertSame(institutionDetails, institutionDetails2);
        assertSame(states2, states5);
        assertSame(states, states6);
        assertSame(states3, states7);
        assertSame(states4, states8);
        assertSame(coSubCategoryDetails, coSubCategoryDetails2);
        assertSame(subCategoryDetails, subCategoryDetails2);
        assertSame(outputMapper, subServices6.getOutputMapper());
        assertSame(outputMapper2, subServices7.getOutputMapper());
        assertSame(outputMapper16, subServices8.getOutputMapper());
        assertSame(outputMapper18, subServices9.getOutputMapper());
        assertSame(outputMapper4, subServices10.getOutputMapper());
        assertSame(outputMapper3, categoryDetails9.getOutputMapper());
        assertSame(outputMapper17, coCategoryDetails2.getOutputMapper());
        assertSame(outputMapper19, categoryDetails10.getOutputMapper());
        assertSame(outputMapper5, categoryDetails11.getOutputMapper());
        assertSame(outputMapper9, districtBlock2.getOutputMapper());
        assertSame(outputMapper11, block2.getOutputMapper());
        assertSame(outputMapper8, district2.getOutputMapper());
        assertSame(outputMapper13, m_district2.getOutputMapper());
        assertSame(outputMapper15, institutionDetails2.getOutputMapper());
        assertSame(outputMapper10, states5.getOutputMapper());
        assertSame(outputMapper7, states6.getOutputMapper());
        assertSame(outputMapper12, states7.getOutputMapper());
        assertSame(outputMapper14, states8.getOutputMapper());
        assertSame(outputMapper20, coSubCategoryDetails2.getOutputMapper());
        assertSame(outputMapper6, subCategoryDetails2.getOutputMapper());
        assertSame(benCallServicesMappingHistories, benCallServicesMappingHistories12);
        assertSame(benCallServicesMappingHistories2, benCallServicesMappingHistories13);
        assertSame(benCallServicesMappingHistories7, benCallServicesMappingHistories14);
        assertSame(benCallServicesMappingHistories9, benCallServicesMappingHistories15);
        assertSame(benCallServicesMappingHistories4, benCallServicesMappingHistories16);
        assertSame(categoryDetails, categoryDetails12);
        assertSame(categoryDetails2, categoryDetails13);
        assertSame(categoryDetails6, categoryDetails14);
        assertSame(categoryDetails7, categoryDetails15);
        assertSame(categoryDetails4, categoryDetails16);
        assertSame(feedbackRequestDetails, feedbackRequestDetails2);
        assertSame(benCallServicesMappingHistories3, benCallServicesMappingHistories17);
        assertSame(benCallServicesMappingHistories8, benCallServicesMappingHistories18);
        assertSame(benCallServicesMappingHistories10, benCallServicesMappingHistories19);
        assertSame(benCallServicesMappingHistories5, benCallServicesMappingHistories20);
        assertSame(benCallServicesMappingHistories11, benCallServicesMappingHistories21);
        assertSame(benCallServicesMappingHistories6, benCallServicesMappingHistories22);
        assertSame(subCategories, subCategories5);
        assertSame(subCategories3, subCategories6);
        assertSame(subCategories4, subCategories7);
        assertSame(subCategories2, subCategories8);
        assertSame(createdDate, actualBenCallServicesMappingHistory.getCreatedDate());
    }

    /**
     * Methods under test:
     *
     * <ul>
     *   <li>
     * {@link BenCallServicesMappingHistory#BenCallServicesMappingHistory(Long, Long, Long, Integer, SubServices, Integer, CategoryDetails, Integer, SubCategoryDetails, String, Timestamp)}
     *   <li>{@link BenCallServicesMappingHistory#toString()}
     * </ul>
     */
    @Test
    void testGettersAndSetters3() {
        // Arrange
        SubServices subServices = new SubServices();
        ArrayList<BenCallServicesMappingHistory> benCallServicesMappingHistories = new ArrayList<>();
        subServices.setBenCallServicesMappingHistories(benCallServicesMappingHistories);
        ArrayList<CategoryDetails> categoryDetails = new ArrayList<>();
        subServices.setCategoryDetails(categoryDetails);
        subServices.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        subServices.setCreatedDate(mock(Timestamp.class));
        subServices.setDeleted(true);
        subServices.setLastModDate(mock(Timestamp.class));
        subServices.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper = new OutputMapper();
        subServices.setOutputMapper(outputMapper);
        subServices.setSubServiceDesc("Sub Service Desc");
        subServices.setSubServiceID(1);
        subServices.setSubServiceName("Sub Service Name");

        SubServices subServices2 = new SubServices();
        ArrayList<BenCallServicesMappingHistory> benCallServicesMappingHistories2 = new ArrayList<>();
        subServices2.setBenCallServicesMappingHistories(benCallServicesMappingHistories2);
        ArrayList<CategoryDetails> categoryDetails2 = new ArrayList<>();
        subServices2.setCategoryDetails(categoryDetails2);
        subServices2.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        subServices2.setCreatedDate(mock(Timestamp.class));
        subServices2.setDeleted(true);
        subServices2.setLastModDate(mock(Timestamp.class));
        subServices2.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper2 = new OutputMapper();
        subServices2.setOutputMapper(outputMapper2);
        subServices2.setSubServiceDesc("Sub Service Desc");
        subServices2.setSubServiceID(1);
        subServices2.setSubServiceName("Sub Service Name");

        CategoryDetails categoryDetails3 = new CategoryDetails();
        ArrayList<BenCallServicesMappingHistory> benCallServicesMappingHistories3 = new ArrayList<>();
        categoryDetails3.setBenCallServicesMappingHistories(benCallServicesMappingHistories3);
        categoryDetails3.setCategoryDesc("Category Desc");
        categoryDetails3.setCategoryID(1);
        categoryDetails3.setCategoryName("Category Name");
        categoryDetails3.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        categoryDetails3.setCreatedDate(mock(Timestamp.class));
        categoryDetails3.setDeleted(true);
        categoryDetails3.setLastModDate(mock(Timestamp.class));
        categoryDetails3.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper3 = new OutputMapper();
        categoryDetails3.setOutputMapper(outputMapper3);
        HashSet<SubCategoryDetails> subCategories = new HashSet<>();
        categoryDetails3.setSubCategories(subCategories);
        categoryDetails3.setSubServiceID(1);
        categoryDetails3.setSubServices(subServices2);

        SubServices subServices3 = new SubServices();
        ArrayList<BenCallServicesMappingHistory> benCallServicesMappingHistories4 = new ArrayList<>();
        subServices3.setBenCallServicesMappingHistories(benCallServicesMappingHistories4);
        ArrayList<CategoryDetails> categoryDetails4 = new ArrayList<>();
        subServices3.setCategoryDetails(categoryDetails4);
        subServices3.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        subServices3.setCreatedDate(mock(Timestamp.class));
        subServices3.setDeleted(true);
        subServices3.setLastModDate(mock(Timestamp.class));
        subServices3.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper4 = new OutputMapper();
        subServices3.setOutputMapper(outputMapper4);
        subServices3.setSubServiceDesc("Sub Service Desc");
        subServices3.setSubServiceID(1);
        subServices3.setSubServiceName("Sub Service Name");

        CategoryDetails categoryDetails5 = new CategoryDetails();
        ArrayList<BenCallServicesMappingHistory> benCallServicesMappingHistories5 = new ArrayList<>();
        categoryDetails5.setBenCallServicesMappingHistories(benCallServicesMappingHistories5);
        categoryDetails5.setCategoryDesc("Category Desc");
        categoryDetails5.setCategoryID(1);
        categoryDetails5.setCategoryName("Category Name");
        categoryDetails5.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        categoryDetails5.setCreatedDate(mock(Timestamp.class));
        categoryDetails5.setDeleted(true);
        categoryDetails5.setLastModDate(mock(Timestamp.class));
        categoryDetails5.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper5 = new OutputMapper();
        categoryDetails5.setOutputMapper(outputMapper5);
        HashSet<SubCategoryDetails> subCategories2 = new HashSet<>();
        categoryDetails5.setSubCategories(subCategories2);
        categoryDetails5.setSubServiceID(1);
        categoryDetails5.setSubServices(subServices3);

        SubCategoryDetails subCategoryDetails = new SubCategoryDetails();
        ArrayList<BenCallServicesMappingHistory> benCallServicesMappingHistories6 = new ArrayList<>();
        subCategoryDetails.setBenCallServicesMappingHistories(benCallServicesMappingHistories6);
        subCategoryDetails.setCategoryDetails(categoryDetails5);
        subCategoryDetails.setCategoryID(1);
        subCategoryDetails.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        subCategoryDetails.setCreatedDate(mock(Timestamp.class));
        subCategoryDetails.setDeleted(true);
        subCategoryDetails.setLastModDate(mock(Timestamp.class));
        subCategoryDetails.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper6 = new OutputMapper();
        subCategoryDetails.setOutputMapper(outputMapper6);
        subCategoryDetails.setSubCatFilePath("/directory/foo.txt");
        subCategoryDetails.setSubCategoryDesc("Sub Category Desc");
        subCategoryDetails.setSubCategoryID(1);
        subCategoryDetails.setSubCategoryName("Sub Category Name");
        Timestamp createdDate = mock(Timestamp.class);

        // Act
        BenCallServicesMappingHistory actualBenCallServicesMappingHistory = new BenCallServicesMappingHistory(1L, 1L, 1L, 1,
                subServices, 1, categoryDetails3, 1, subCategoryDetails, "Jan 1, 2020 8:00am GMT+0100", createdDate);
        actualBenCallServicesMappingHistory.toString();

        // Assert
        SubCategoryDetails subCategoryDetails2 = actualBenCallServicesMappingHistory.getSubCategoryDetails();
        assertEquals("/directory/foo.txt", subCategoryDetails2.getSubCatFilePath());
        CategoryDetails categoryDetails6 = actualBenCallServicesMappingHistory.getCategoryDetails();
        assertEquals("Category Desc", categoryDetails6.getCategoryDesc());
        CategoryDetails categoryDetails7 = subCategoryDetails2.getCategoryDetails();
        assertEquals("Category Desc", categoryDetails7.getCategoryDesc());
        assertEquals("Category Name", categoryDetails6.getCategoryName());
        assertEquals("Category Name", categoryDetails7.getCategoryName());
        assertEquals("Jan 1, 2020 8:00am GMT+0100", actualBenCallServicesMappingHistory.getCreatedBy());
        SubServices subServices4 = actualBenCallServicesMappingHistory.getSubServices();
        assertEquals("Jan 1, 2020 8:00am GMT+0100", subServices4.getCreatedBy());
        SubServices subServices5 = categoryDetails6.getSubServices();
        assertEquals("Jan 1, 2020 8:00am GMT+0100", subServices5.getCreatedBy());
        SubServices subServices6 = categoryDetails7.getSubServices();
        assertEquals("Jan 1, 2020 8:00am GMT+0100", subServices6.getCreatedBy());
        assertEquals("Jan 1, 2020 8:00am GMT+0100", categoryDetails6.getCreatedBy());
        assertEquals("Jan 1, 2020 8:00am GMT+0100", categoryDetails7.getCreatedBy());
        assertEquals("Jan 1, 2020 8:00am GMT+0100", subCategoryDetails2.getCreatedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", subServices4.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", subServices5.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", subServices6.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", categoryDetails6.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", categoryDetails7.getModifiedBy());
        assertEquals("Jan 1, 2020 9:00am GMT+0100", subCategoryDetails2.getModifiedBy());
        assertEquals("Sub Category Desc", subCategoryDetails2.getSubCategoryDesc());
        assertEquals("Sub Category Name", subCategoryDetails2.getSubCategoryName());
        assertEquals("Sub Service Desc", subServices4.getSubServiceDesc());
        assertEquals("Sub Service Desc", subServices5.getSubServiceDesc());
        assertEquals("Sub Service Desc", subServices6.getSubServiceDesc());
        assertEquals("Sub Service Name", subServices4.getSubServiceName());
        assertEquals("Sub Service Name", subServices5.getSubServiceName());
        assertEquals("Sub Service Name", subServices6.getSubServiceName());
        assertNull(actualBenCallServicesMappingHistory.getBeneficiaryCall());
        assertNull(actualBenCallServicesMappingHistory.getFeedbackDetails());
        assertNull(actualBenCallServicesMappingHistory.getCoCategoryDetails());
        assertNull(actualBenCallServicesMappingHistory.getInstituteDirectoryMapping());
        assertNull(actualBenCallServicesMappingHistory.getCoSubCategoryDetails());
        assertNull(actualBenCallServicesMappingHistory.getDeleted());
        assertNull(actualBenCallServicesMappingHistory.getCoCategoryID());
        assertNull(actualBenCallServicesMappingHistory.getCoSubCategoryID());
        assertNull(actualBenCallServicesMappingHistory.getFeedbackID());
        assertNull(actualBenCallServicesMappingHistory.getInstituteDirMapID());
        assertNull(actualBenCallServicesMappingHistory.getModifiedBy());
        assertNull(actualBenCallServicesMappingHistory.getRequestID());
        assertNull(actualBenCallServicesMappingHistory.getLastModDate());
        assertEquals(1, actualBenCallServicesMappingHistory.getCategoryID().intValue());
        assertEquals(1, actualBenCallServicesMappingHistory.getSubCategoryID().intValue());
        assertEquals(1, actualBenCallServicesMappingHistory.getSubServiceID().intValue());
        assertEquals(1, subServices4.getSubServiceID().intValue());
        assertEquals(1, subServices5.getSubServiceID().intValue());
        assertEquals(1, subServices6.getSubServiceID().intValue());
        assertEquals(1, categoryDetails6.getCategoryID().intValue());
        assertEquals(1, categoryDetails7.getCategoryID().intValue());
        assertEquals(1, categoryDetails6.getSubServiceID().intValue());
        assertEquals(1, categoryDetails7.getSubServiceID().intValue());
        assertEquals(1, subCategoryDetails2.getCategoryID().intValue());
        assertEquals(1, subCategoryDetails2.getSubCategoryID().intValue());
        assertEquals(1L, actualBenCallServicesMappingHistory.getBenCall97ServiceMapID().longValue());
        assertEquals(1L, actualBenCallServicesMappingHistory.getBenCallID().longValue());
        assertEquals(1L, actualBenCallServicesMappingHistory.getBeneficiaryRegID().longValue());
        assertTrue(subServices4.getDeleted());
        assertTrue(subServices5.getDeleted());
        assertTrue(subServices6.getDeleted());
        assertTrue(categoryDetails6.getDeleted());
        assertTrue(categoryDetails7.getDeleted());
        assertTrue(subCategoryDetails2.getDeleted());
        List<SubCategoryDetails> counsellings = actualBenCallServicesMappingHistory.getCounsellings();
        assertTrue(counsellings.isEmpty());
        List<FeedbackDetails> feedbacks = actualBenCallServicesMappingHistory.getFeedbacks();
        assertTrue(feedbacks.isEmpty());
        List<SubCategoryDetails> informations = actualBenCallServicesMappingHistory.getInformations();
        assertTrue(informations.isEmpty());
        List<DirectoryMapping> referrals = actualBenCallServicesMappingHistory.getReferrals();
        assertTrue(referrals.isEmpty());
        List<BenCallServicesMappingHistory> benCallServicesMappingHistories7 = subServices4
                .getBenCallServicesMappingHistories();
        assertTrue(benCallServicesMappingHistories7.isEmpty());
        List<BenCallServicesMappingHistory> benCallServicesMappingHistories8 = subServices5
                .getBenCallServicesMappingHistories();
        assertTrue(benCallServicesMappingHistories8.isEmpty());
        List<BenCallServicesMappingHistory> benCallServicesMappingHistories9 = subServices6
                .getBenCallServicesMappingHistories();
        assertTrue(benCallServicesMappingHistories9.isEmpty());
        List<CategoryDetails> categoryDetails8 = subServices4.getCategoryDetails();
        assertTrue(categoryDetails8.isEmpty());
        List<CategoryDetails> categoryDetails9 = subServices5.getCategoryDetails();
        assertTrue(categoryDetails9.isEmpty());
        List<CategoryDetails> categoryDetails10 = subServices6.getCategoryDetails();
        assertTrue(categoryDetails10.isEmpty());
        List<BenCallServicesMappingHistory> benCallServicesMappingHistories10 = categoryDetails6
                .getBenCallServicesMappingHistories();
        assertTrue(benCallServicesMappingHistories10.isEmpty());
        List<BenCallServicesMappingHistory> benCallServicesMappingHistories11 = categoryDetails7
                .getBenCallServicesMappingHistories();
        assertTrue(benCallServicesMappingHistories11.isEmpty());
        List<BenCallServicesMappingHistory> benCallServicesMappingHistories12 = subCategoryDetails2
                .getBenCallServicesMappingHistories();
        assertTrue(benCallServicesMappingHistories12.isEmpty());
        Set<SubCategoryDetails> subCategories3 = categoryDetails6.getSubCategories();
        assertTrue(subCategories3.isEmpty());
        Set<SubCategoryDetails> subCategories4 = categoryDetails7.getSubCategories();
        assertTrue(subCategories4.isEmpty());
        assertEquals(benCallServicesMappingHistories, counsellings);
        assertEquals(benCallServicesMappingHistories, feedbacks);
        assertEquals(benCallServicesMappingHistories, informations);
        assertEquals(benCallServicesMappingHistories, referrals);
        assertEquals(benCallServicesMappingHistories, categoryDetails8);
        assertEquals(benCallServicesMappingHistories, benCallServicesMappingHistories10);
        assertEquals(benCallServicesMappingHistories, benCallServicesMappingHistories12);
        assertSame(subServices, subServices4);
        assertSame(subServices2, subServices5);
        assertSame(subServices3, subServices6);
        assertSame(categoryDetails3, categoryDetails6);
        assertSame(categoryDetails5, categoryDetails7);
        assertSame(subCategoryDetails, subCategoryDetails2);
        assertSame(outputMapper, subServices4.getOutputMapper());
        assertSame(outputMapper2, subServices5.getOutputMapper());
        assertSame(outputMapper4, subServices6.getOutputMapper());
        assertSame(outputMapper3, categoryDetails6.getOutputMapper());
        assertSame(outputMapper5, categoryDetails7.getOutputMapper());
        assertSame(outputMapper6, subCategoryDetails2.getOutputMapper());
        assertSame(benCallServicesMappingHistories, benCallServicesMappingHistories7);
        assertSame(benCallServicesMappingHistories2, benCallServicesMappingHistories8);
        assertSame(benCallServicesMappingHistories4, benCallServicesMappingHistories9);
        assertSame(categoryDetails, categoryDetails8);
        assertSame(categoryDetails2, categoryDetails9);
        assertSame(categoryDetails4, categoryDetails10);
        assertSame(benCallServicesMappingHistories3, benCallServicesMappingHistories10);
        assertSame(benCallServicesMappingHistories5, benCallServicesMappingHistories11);
        assertSame(benCallServicesMappingHistories6, benCallServicesMappingHistories12);
        assertSame(subCategories, subCategories3);
        assertSame(subCategories2, subCategories4);
        assertSame(createdDate, actualBenCallServicesMappingHistory.getCreatedDate());
    }

    /**
     * Methods under test:
     *
     * <ul>
     *   <li>
     * {@link BenCallServicesMappingHistory#BenCallServicesMappingHistory(Long, Long, Long, Integer, SubServices, Long, FeedbackDetails, String, Timestamp)}
     *   <li>{@link BenCallServicesMappingHistory#toString()}
     * </ul>
     */
    @Test
    void testGettersAndSetters4() {
        // Arrange
        SubServices subServices = new SubServices();
        ArrayList<BenCallServicesMappingHistory> benCallServicesMappingHistories = new ArrayList<>();
        subServices.setBenCallServicesMappingHistories(benCallServicesMappingHistories);
        ArrayList<CategoryDetails> categoryDetails = new ArrayList<>();
        subServices.setCategoryDetails(categoryDetails);
        subServices.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        subServices.setCreatedDate(mock(Timestamp.class));
        subServices.setDeleted(true);
        subServices.setLastModDate(mock(Timestamp.class));
        subServices.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper = new OutputMapper();
        subServices.setOutputMapper(outputMapper);
        subServices.setSubServiceDesc("Sub Service Desc");
        subServices.setSubServiceID(1);
        subServices.setSubServiceName("Sub Service Name");

        Designation designation = new Designation();
        designation.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        designation.setCreatedDate(mock(Timestamp.class));
        designation.setDeleted(true);
        designation.setDesignationDesc("Designation Desc");
        designation.setDesignationID(1);
        designation.setDesignationName("Designation Name");
        designation.setLastModDate(mock(Timestamp.class));
        designation.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");

        States states = new States();
        states.setCountryID(1);
        states.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        states.setCreatedDate(mock(Timestamp.class));
        states.setDeleted(true);
        states.setLastModDate(mock(Timestamp.class));
        states.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper2 = new OutputMapper();
        states.setOutputMapper(outputMapper2);
        states.setStateCode("MD");
        states.setStateID(1);
        states.setStateIName("MD");
        states.setStateName("MD");

        Districts district = new Districts();
        district.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        district.setCreatedDate(mock(Timestamp.class));
        district.setDeleted(true);
        district.setDistrictID(1);
        district.setDistrictName("District Name");
        district.setLastModDate(mock(Timestamp.class));
        district.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper3 = new OutputMapper();
        district.setOutputMapper(outputMapper3);
        district.setStateID(1);
        district.setStates(states);

        DistrictBlock districtBlock = new DistrictBlock();
        districtBlock.setBlockID(1);
        districtBlock.setBlockName("Block Name");
        districtBlock.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        districtBlock.setCreatedDate(mock(Timestamp.class));
        districtBlock.setDeleted(true);
        districtBlock.setDistrictID(1);
        districtBlock.setLastModDate(mock(Timestamp.class));
        districtBlock.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        OutputMapper outputMapper4 = new OutputMapper();
        districtBlock.setOutputMapper(outputMapper4);
        districtBlock.setStateID(1);

        FeedbackStatus feedbackStatus = new FeedbackStatus();
        feedbackStatus.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        feedbackStatus.setCreatedDate(mock(Timestamp.class));
        feedbackStatus.setDeleted(true);
        feedbackStatus.setFeedbackStatus("Feedback Status");
        feedbackStatus.setFeedbackStatusDesc("Feedback Status Desc");
        feedbackStatus.setFeedbackStatusID(1);
        feedbackStatus.setLastModDate(mock(Timestamp.class));
        feedbackStatus.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        feedbackStatus.setProviderServiceMapID(1);

        InstituteType instituteType = new InstituteType();
        instituteType.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        instituteType.setCreatedDate(mock(Date.class));
        instituteType.setDeleted(true);
        instituteType.setInstitutionType("Institution Type");
        instituteType.setInstitutionTypeDesc("Institution Type Desc");
        instituteType.setInstitutionTypeID(1);
        instituteType.setLastModDate(mock(Date.class));
        instituteType.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        instituteType.setProviderServiceMapID(1);

        DistrictBranchMapping m_districtbranchmapping = new DistrictBranchMapping();
        m_districtbranchmapping.setBlockID(1);
        m_districtbranchmapping.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        m_districtbranchmapping.setCreatedDate(mock(Timestamp.class));
        m_districtbranchmapping.setDeleted(true);
        m_districtbranchmapping.setDistrictBranchID(1);
        m_districtbranchmapping.setHabitat("Habitat");
        m_districtbranchmapping.setLastModDate(mock(Timestamp.class));
        m_districtbranchmapping.setModifiedBy("Jan 1, 2020");
    }
}